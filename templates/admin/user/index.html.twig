{% extends 'admin/baseadmin.html.twig' %}

{% block head %}   


{% endblock %}
{% block stylesheet %}
    {{ encore_entry_link_tags('loader') }}
{% endblock %}
{% block body %}
<div id="loading" class="loading"></div>

    <div class="m-5 text-light">
    <h1 id="titre" class="title text-center ">Admin</h1>
    <table class="m-5 text-light" id="user">
        <thead>
            <tr>
                <th>Id</th>
                <th>Email</th>
                <th>actions</th>
            </tr>
        </thead>
        <tbody>
        {% for user in users %}
            <tr>
                <td>{{ user.id }}</td>
                <td>{{ user.email }}</td>
                <td>
                    <button onclick="lol({{ user.id }})" class="btn btn-danger">supprimer</button>
                    <button onclick="sendedit({{ user.id }},{{user.email|json_encode()}})" class="btn btn-warning">edit</button>
                </td>
            </tr>
        {% else %}
            <tr>
                <td colspan="5">no records found</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>

    <button class="btn btn-primary" id="usernew" >Create new</button>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://unpkg.com/gridjs-jquery/dist/gridjs.production.min.js"></script>


<script type="module">
    import {
        Grid,
        html, 
        h
    } from "https://unpkg.com/gridjs?module";
    $("#user").Grid({
        resizable: true,
        search: true,
        pagination: {
          limit: 10
        },
        sort: true,
    });



</script>
<script>

function lol (e) {
  let route = "{{ path('admin_user_remove')}}"
    Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, delete it!'
  }).then((result) => {
    if (result.isConfirmed) {
      $.ajax({
        url: route,
        type: 'post',
        data: {data: e},
        success: () => {
            let timerInterval
            Swal.fire({
            title: 'Suppression réussi!',
            icon: 'success',
            html: 'redirection dans <b></b> milliseconds.',
            timer: 2000,
            timerProgressBar: true,
            didOpen: () => {
                const b = Swal.getHtmlContainer().querySelector('b')
                timerInterval = setInterval(() => {
                b.textContent = Swal.getTimerLeft()
                }, 100)
            },
            willClose: () => {
                clearInterval(timerInterval)
            }
            }).then((result) => {
            /* Read more about handling dismissals below */
            if (result.dismiss === Swal.DismissReason.timer) {
                location.reload();
            } else {
                location.reload();
            }
            })
        },
        error: (data) => {
            Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Something went wrong!',   
            })
        }
    });  
    }
  })
}
</script>
<script>
function send (){
    Swal.fire({
        title: 'Ajouter un admin',
        html: `<input type="text" id="login" class="swal2-input" placeholder="Username">
        <input type="password" id="password" class="swal2-input" placeholder="Password">
        <input type="password" id="passwordC" class="swal2-input" placeholder="Password confirm">`,
        confirmButtonText: 'Sign in',
        focusConfirm: false,
        preConfirm: () => {
            const login = Swal.getPopup().querySelector('#login').value
            const password = Swal.getPopup().querySelector('#password').value
            const passwordC = Swal.getPopup().querySelector('#passwordC').value
            if (!login || !password) {
            Swal.showValidationMessage(`Please enter login and password`)
            }
            if (password != passwordC) {
            Swal.showValidationMessage(`Les mots de passe sont différents`)
            }
            return { login: login, password: password }
        }
        }).then((result) => {
        if(result.isConfirmed){
         $.ajax({
                type: "POST",
                url: "{{ path('admin_register_FromAdmin') }}",
                data: {
                    'Login': result.value.login,
                    'Password': result.value.password
                    },
                cache: false,
                success: function(response) {
                    swal.fire(
                    "Success!",
                    "ajouté avec succès !",
                    "success"
                    )
                },
                error: function (response) {
                    swal.fire(
                    "Internal Error",
                    "Oops, un problème est survenu.", // had a missing comma
                    "error"
                    )
                }
            });
            }else{
            swal.fire(
            "Cancelled",
            "Canceled Note",
            "error"
            )
        }
    }) 
}

let secteurbtn = $('#usernew')
secteurbtn.click(() => {
    send()
})


</script>

<script>
function sendedit (id, email){
    Swal.fire({
        title: 'editer un admin',
        html: `
        <input type="text" id="login" class="swal2-input" value="${email}" placeholder="Username">
        <label class="form-check-label my-2" for="flexCheckDefault">Changer le mots de passe</label>
        <input id="mdp" class="form-check-input my-2" type="checkbox" role="switch" data-mdb-toggle="collapse" data-mdb-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample" />

        <div class="collapse" id="collapseExample">
        <input type="password" id="password" class="swal2-input" placeholder="nouveau mdp">
        <input type="password" id="passwordC" class="swal2-input" placeholder="confirm">        
        </div>`,

        confirmButtonText: 'Sign in',
        focusConfirm: false,
        preConfirm: () => {
            const login = Swal.getPopup().querySelector('#login').value
            const password = Swal.getPopup().querySelector('#password').value
            const passwordC = Swal.getPopup().querySelector('#passwordC').value
            if(login){
                if (password != passwordC) {
                Swal.showValidationMessage(`Les mots de passe sont différents`)
                }
            }
            return { login: login, password: password }
        }
        }).then((result) => {
        if(result.isConfirmed){
         $.ajax({
                type: "POST",
                url: "{{ path('admin_user_edit') }}",
                data: {
                    'id': id,
                    'Login': result.value.login,
                    'Password': result.value.password
                    },
                cache: false,
                success: function(response) {
                    swal.fire(
                    "Success!",
                    "ajouté avec succès !",
                    "success"
                    )
                },
                error: function (response) {
                    console.log(response)
                    swal.fire(
                    "Internal Error",
                    "Oops, un problème est survenu.", // had a missing comma
                    "error"
                    )
                }
            });
            }else{
            swal.fire(
            "Cancelled",
            "Canceled Note",
            "error"
            )
        }
    }) 
}
    
if(document.querySelector('#mdp')){

    let btn = document.querySelector('#mdp');
    let toggler = document.querySelector('#toggler')
    btn.addEventListener('click', () => {
        console.log("coucou")
    if (toggler.classList.contains('d-none')) {
        toggler.classList.remove('d-none');
    } else {
        toggler.classList.add('d-none');
    }
    })
}


</script>

{% block js %}
    {{ encore_entry_script_tags('loaderjs') }}
{% endblock %}
{% endblock %}
